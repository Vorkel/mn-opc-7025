"""
Application Streamlit MLOps Credit Scoring - Version Simplifi√©e
"""

import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime
import joblib
from pathlib import Path
import sys
import numpy as np

# Configuration de la page
st.set_page_config(
    page_title="MLOps Credit Scoring",
    layout="wide",
    initial_sidebar_state="expanded",
)

# Style CSS moderne
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(90deg, #7451F8 0%, #4F46E5 100%);
        padding: 2rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background: white;
        padding: 1.5rem;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        border-left: 4px solid #7451F8;
    }
    .status-success {
        background: #10B981;
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 20px;
        display: inline-block;
    }
    .status-danger {
        background: #EF4444;
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 20px;
        display: inline-block;
    }
</style>
""", unsafe_allow_html=True)

# Chemins des fichiers
BASE_DIR = Path(__file__).parent.parent
MODEL_PATH = BASE_DIR / "models" / "best_credit_model.pkl"
TRAIN_DATA_PATH = BASE_DIR / "data" / "processed" / "train_processed.csv"

# Charger le mod√®le
@st.cache_resource
def load_model():
    """Charger le mod√®le ML"""
    try:
        if MODEL_PATH.exists():
            model_data = joblib.load(MODEL_PATH)
            
            # Afficher des infos de debug
            st.info(f"Type de mod√®le charg√©: {type(model_data)}")
            
            # G√©rer diff√©rents formats de sauvegarde
            if isinstance(model_data, dict):
                if 'model' in model_data:
                    actual_model = model_data['model']
                    st.success(f"‚úÖ Mod√®le extrait du dictionnaire: {type(actual_model)}")
                    if hasattr(actual_model, 'n_features_in_'):
                        st.info(f"Features attendues: {actual_model.n_features_in_}")
                else:
                    st.warning(f"‚ö†Ô∏è Dictionnaire sans cl√© 'model'. Cl√©s disponibles: {list(model_data.keys())}")
            else:
                st.success(f"‚úÖ Mod√®le charg√© directement: {type(model_data)}")
            
            return model_data
        else:
            st.error(f"‚ùå Mod√®le non trouv√©: {MODEL_PATH}")
            return None
    except Exception as e:
        st.error(f"‚ùå Erreur lors du chargement du mod√®le: {e}")
        return None

# Charger les donn√©es d'exemple
@st.cache_data
def load_sample_data():
    """Charger un √©chantillon de donn√©es pour les tests"""
    try:
        if TRAIN_DATA_PATH.exists():
            df = pd.read_csv(TRAIN_DATA_PATH)
            return df.drop(['TARGET', 'SK_ID_CURR'], axis=1, errors='ignore').sample(100)
        else:
            # Donn√©es factices pour la d√©mo
            return pd.DataFrame({
                'EXT_SOURCE_2': np.random.normal(0.5, 0.2, 100),
                'EXT_SOURCE_3': np.random.normal(0.5, 0.2, 100),
                'DAYS_BIRTH': np.random.randint(-25000, -5000, 100),
                'AMT_INCOME_TOTAL': np.random.normal(150000, 50000, 100),
                'AMT_CREDIT': np.random.normal(500000, 200000, 100),
            })
    except Exception as e:
        st.error(f"‚ùå Erreur donn√©es: {e}")
        return pd.DataFrame()

def predict_client(model, features_df):
    """Faire une pr√©diction pour un client"""
    try:
        if model is None:
            return None, "Mod√®le non disponible"
        
        # G√©rer le cas o√π le mod√®le est un dictionnaire
        if isinstance(model, dict):
            if 'model' in model:
                actual_model = model['model']
                st.info(f"Mod√®le extrait: {type(actual_model)}")
            else:
                return None, "Format de mod√®le non reconnu (dictionnaire sans cl√© 'model')"
        else:
            actual_model = model
        
        # V√©rifier que le mod√®le a la m√©thode predict_proba
        if not hasattr(actual_model, 'predict_proba'):
            return None, f"Le mod√®le de type {type(actual_model)} n'a pas de m√©thode predict_proba"
        
        # Faire la pr√©diction avec le DataFrame
        proba = actual_model.predict_proba(features_df)[0][1]
        prediction = "REFUS√â" if proba > 0.38 else "ACCEPT√â"
        
        return {
            'probability': proba,
            'decision': prediction,
            'risk_level': '√âLEV√â' if proba > 0.6 else 'MOYEN' if proba > 0.3 else 'FAIBLE'
        }, None
        
    except Exception as e:
        return None, f"Erreur pr√©diction: {e}"

def main():
    """Application principale"""
    
    # En-t√™te
    st.markdown("""
    <div class="main-header">
        <h1>MLOps Credit Scoring</h1>
        <p>Syst√®me de scoring cr√©dit avec IA explicable</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Charger le mod√®le
    model = load_model()
    sample_data = load_sample_data()
    
    # Sidebar pour navigation
    with st.sidebar:
        st.header("Navigation")
        page = st.selectbox(
            "Choisir une page",
            ["Accueil", "Pr√©diction", "Analyse", "Param√®tres"]
        )
        
        st.markdown("---")
        st.subheader("Statistiques")
        if model:
            st.success("‚úÖ Mod√®le: Random Forest")
            st.info("AUC: 0.743")
            st.info("R√©duction co√ªt: -31%")
        else:
            st.error("‚ùå Mod√®le non charg√©")
    
    # Pages
    if page == "Accueil":
        render_home_page()
    elif page == "Pr√©diction":
        render_prediction_page(model, sample_data)
    elif page == "Analyse":
        render_analysis_page(sample_data)
    elif page == "Param√®tres":
        render_settings_page()

def render_home_page():
    """Page d'accueil"""
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("""
        <div class="metric-card">
            <h3>Performance</h3>
            <h2>AUC: 0.743</h2>
            <p>Tr√®s performant pour le cr√©dit</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="metric-card">
            <h3>Impact M√©tier</h3>
            <h2>-31% Co√ªt</h2>
            <p>R√©duction significative</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown("""
        <div class="metric-card">
            <h3>Mod√®le</h3>
            <h2>Random Forest</h2>
            <p>Robuste et explicable</p>
        </div>
        """, unsafe_allow_html=True)
    
    st.markdown("---")
    
    st.subheader("Fonctionnalit√©s")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        **Pr√©diction**
        - Analyse de profil client
        - Probabilit√© de d√©faut
        - D√©cision automatique
        - Explicabilit√© SHAP
        """)
        
        st.markdown("""
        **Analyse**
        - Visualisations interactives
        - Tendances et patterns
        - Performance mod√®le
        """)
    
    with col2:
        st.markdown("""
        **Param√®tres**
        - Configuration seuils
        - Pr√©f√©rences d'affichage
        - Export/Import donn√©es
        """)
        
        st.markdown("""
        **Monitoring**
        - Data drift detection
        - Alertes automatiques
        - Rapports qualit√©
        """)

def render_prediction_page(model, sample_data):
    """Page de pr√©diction"""
    
    st.subheader("Pr√©diction Client")
    
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.markdown("### Saisie Profil Client")
        
        # Formulaire simplifi√©
        with st.form("client_form"):
            age = st.slider("√Çge (ann√©es)", 18, 80, 35)
            income = st.number_input("Revenus annuels (‚Ç¨)", 0, 1000000, 150000)
            credit = st.number_input("Montant cr√©dit demand√© (‚Ç¨)", 0, 2000000, 500000)
            ext_source_2 = st.slider("Score externe 2", 0.0, 1.0, 0.5)
            ext_source_3 = st.slider("Score externe 3", 0.0, 1.0, 0.5)
            
            submit = st.form_submit_button("üöÄ Analyser")
        
        # Ou charger un exemple
        st.markdown("---")
        if st.button("Charger exemple al√©atoire"):
            if not sample_data.empty:
                example = sample_data.sample(1).iloc[0]
                st.session_state.example = example
                st.success("Exemple charg√©! Modifiez les valeurs ci-dessus si n√©cessaire.")
    
    with col2:
        st.markdown("### R√©sultat de l'Analyse")
        
        if submit and model:
            # Le mod√®le attend exactement 20 features nomm√©es feature_0 √† feature_19
            base_features = [
                ext_source_2,      # feature_0
                ext_source_3,      # feature_1
                -age * 365,        # feature_2 (DAYS_BIRTH)
                income,            # feature_3
                credit,            # feature_4
            ]
            
            # Compl√©ter avec 15 features suppl√©mentaires (z√©ros pour la d√©mo)
            # En production, il faudrait les vraies features du preprocessing
            features = base_features + [0.0] * 15  # Total = 20 features
            
            st.info(f"Envoi de {len(features)} features au mod√®le (attendu: 20)")
            
            # Cr√©er un DataFrame avec les noms de features attendus
            feature_names = [f'feature_{i}' for i in range(20)]
            features_df = pd.DataFrame([features], columns=feature_names)
            st.info(f"Features DataFrame cr√©√©: {features_df.shape}")
            
            result, error = predict_client(model, features_df)
            
            if result:
                # Affichage du r√©sultat
                prob = result['probability']
                decision = result['decision']
                risk = result['risk_level']
                
                # Gauge de probabilit√©
                fig = go.Figure(go.Indicator(
                    mode = "gauge+number+delta",
                    value = prob * 100,
                    domain = {'x': [0, 1], 'y': [0, 1]},
                    title = {'text': "Probabilit√© de D√©faut (%)"},
                    delta = {'reference': 38},  # Seuil
                    gauge = {
                        'axis': {'range': [None, 100]},
                        'bar': {'color': "#7451F8"},
                        'steps': [
                            {'range': [0, 30], 'color': "#D1FAE5"},
                            {'range': [30, 60], 'color': "#FEF3C7"},
                            {'range': [60, 100], 'color': "#FEE2E2"}
                        ],
                        'threshold': {
                            'line': {'color': "#EF4444", 'width': 4},
                            'thickness': 0.75,
                            'value': 38
                        }
                    }
                ))
                
                fig.update_layout(height=300)
                st.plotly_chart(fig, use_container_width=True)
                
                # D√©cision
                if decision == "ACCEPT√â":
                    st.markdown(f'<div class="status-success">‚úÖ CR√âDIT {decision}</div>', unsafe_allow_html=True)
                else:
                    st.markdown(f'<div class="status-danger">‚ùå CR√âDIT {decision}</div>', unsafe_allow_html=True)
                
                st.markdown(f"**Niveau de risque:** {risk}")
                st.markdown(f"**Probabilit√©:** {prob:.1%}")
                
                # Facteurs explicatifs (simplifi√©)
                st.markdown("### üîç Facteurs Explicatifs")
                if prob > 0.5:
                    st.error("üî¥ Facteurs de risque √©lev√© d√©tect√©s")
                elif prob > 0.3:
                    st.warning("üü° Profil pr√©sentant quelques risques")
                else:
                    st.success("üü¢ Profil √† faible risque")
                
            else:
                st.error(f"‚ùå {error}")

def render_analysis_page(sample_data):
    """Page d'analyse"""
    
    st.subheader("Analyse des Donn√©es")
    
    if sample_data.empty:
        st.warning("Pas de donn√©es √† analyser")
        return
    
    # Distribution des scores
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### Distribution EXT_SOURCE_2")
        fig = px.histogram(sample_data, x='EXT_SOURCE_2', nbins=20)
        fig.update_layout(height=300)
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        st.markdown("### Distribution EXT_SOURCE_3")
        fig = px.histogram(sample_data, x='EXT_SOURCE_3', nbins=20)
        fig.update_layout(height=300)
        st.plotly_chart(fig, use_container_width=True)
    
    # Corr√©lations
    st.markdown("### Matrice de Corr√©lation")
    corr = sample_data.select_dtypes(include=[np.number]).corr()
    fig = px.imshow(corr, text_auto=True, aspect="auto")
    fig.update_layout(height=400)
    st.plotly_chart(fig, use_container_width=True)
    
    # Statistiques
    st.markdown("### Statistiques Descriptives")
    st.dataframe(sample_data.describe())

def render_settings_page():
    """Page de param√®tres"""
    
    st.subheader("Param√®tres")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### Seuils de D√©cision")
        threshold = st.slider("Seuil de refus (%)", 0, 100, 38)
        st.info(f"Clients avec probabilit√© > {threshold}% seront refus√©s")
        
        st.markdown("### Affichage")
        theme = st.selectbox("Th√®me", ["Clair", "Sombre"])
        lang = st.selectbox("Langue", ["Fran√ßais", "English"])
    
    with col2:
        st.markdown("### Export/Import")
        if st.button("Exporter param√®tres"):
            st.success("Param√®tres export√©s!")

        uploaded_file = st.file_uploader("Importer param√®tres", type=['json'])
        if uploaded_file:
            st.success("Param√®tres import√©s!")

        st.markdown("### Mise √† jour Mod√®le")
        if st.button("Recharger mod√®le"):
            st.cache_resource.clear()
            st.success("Mod√®le recharg√©!")

if __name__ == "__main__":
    main()
