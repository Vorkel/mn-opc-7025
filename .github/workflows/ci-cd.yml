# .github/workflows/ci-cd.yml
# Force new build - test_feature_alignment.py removed
name: CI/CD Pipeline - Credit Scoring MLOps v2

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: "3.11"

jobs:
  # Tests et validation
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          clean: true

      - name: NUCLEAR CACHE CLEAR - Force complete cleanup
        run: |
          echo "=== COMPLETE CACHE INVALIDATION ==="
          find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
          find . -type d -name ".pytest_cache" -exec rm -rf {} + 2>/dev/null || true
          find . -type d -name ".mypy_cache" -exec rm -rf {} + 2>/dev/null || true
          find . -name "*.pyc" -delete 2>/dev/null || true
          find . -name "*.pyo" -delete 2>/dev/null || true
          find . -name ".coverage*" -delete 2>/dev/null || true
          rm -rf .tox/ 2>/dev/null || true
          rm -rf htmlcov/ 2>/dev/null || true
          echo "=== VERIFYING NO test_feature_alignment.py EXISTS ==="
          ! find . -name "*test_feature_alignment.py" -type f | grep -v simple || echo "ERROR: test_feature_alignment.py still exists!"
          echo "=== END CACHE CLEAR ==="

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies with Poetry
        run: |
          poetry install --with dev

      - name: List test files
        run: |
          echo "Files in tests directory:"
          find tests/ -name "*.py" | sort
          echo ""
          echo "Running pytest on existing files only..."

      - name: Run tests with Poetry
        run: |
          echo "=== RUNNING PYTEST WITH POETRY ==="
          echo "Available test files:"
          find tests/ -name "test_*.py" | sort
          echo ""
          echo "Running tests with Poetry (uses pyproject.toml config):"
          poetry run pytest tests/ -v --cov=src --cov=api --cov=streamlit_app --cov-report=xml --cache-clear

      - name: Run linting with Poetry
        run: |
          poetry run flake8 src/ api/ streamlit_app/ tests/ --max-line-length=100 --ignore=E501,W503

      - name: Run code formatting check with Poetry
        run: |
          poetry run black --check src/ api/ streamlit_app/ tests/

      - name: Upload coverage to Codecov
        if: github.event_name == 'push'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests

  # Validation de l'API
  validate-api:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install API dependencies
        run: |
          poetry install --only main

      - name: Test API startup
        run: |
          timeout 30s poetry run python -c "
          import uvicorn
          from api.app import app
          print('API importée avec succès')
          " || exit 1

      - name: Validate API endpoints
        run: |
          poetry run python -c "
          from api.app import app
          routes = [route.path for route in app.routes]
          required_routes = ['/health', '/predict', '/docs']
          missing = [r for r in required_routes if r not in routes]
          if missing:
              print(f'Routes manquantes: {missing}')
              exit(1)
          print('✅ Toutes les routes requises sont présentes')
          "

  # Validation Streamlit
  validate-streamlit:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install Streamlit dependencies
        run: |
          poetry install --only main

      - name: Test Streamlit startup
        run: |
          timeout 30s poetry run python -c "
          import streamlit as st
          from streamlit_app.main import main
          print('Streamlit app importée avec succès')
          " || exit 1

  # Build et package
  build:
    needs: [test, validate-api, validate-streamlit]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Generate requirements files
        run: |
          echo "Génération des fichiers requirements..."
          echo "API requirements:"
          cat requirements_minimal.txt
          echo ""
          echo "Streamlit requirements:"
          cat streamlit_app/requirements.txt

      - name: Validate deployment files
        run: |
          echo "Validation des fichiers de déploiement..."

          # Vérifier render.yaml
          if [ -f "render.yaml" ]; then
              echo "render.yaml présent"
          else
              echo "render.yaml manquant"
              exit 1
          fi

          # Vérifier requirements_minimal.txt
          if [ -f "requirements_minimal.txt" ]; then
              echo "requirements_minimal.txt présent"
          else
              echo "requirements_minimal.txt manquant"
              exit 1
          fi

          # Vérifier .streamlit/config.toml
          if [ -f "streamlit_app/.streamlit/config.toml" ]; then
              echo "Streamlit config présent"
          else
              echo "Streamlit config manquant"
              exit 1
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-files
          path: |
            render.yaml
            requirements_minimal.txt
            streamlit_app/requirements.txt
            streamlit_app/.streamlit/
            streamlit_app/runtime.txt
            streamlit_app/setup.sh

  # Notification
  notify:
    needs: [test, validate-api, validate-streamlit, build]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Notify success
        if: ${{ needs.build.result == 'success' }}
        run: |
          echo "Pipeline CI/CD réussi!"
          echo "Tests: ${{ needs.test.result }}"
          echo "API Validation: ${{ needs.validate-api.result }}"
          echo "Streamlit Validation: ${{ needs.validate-streamlit.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo ""
          echo "Prêt pour le déploiement sur:"
          echo "   - Render.com (API): https://mn-opc-7025.onrender.com"
          echo "   - Streamlit Cloud (UI): https://mn-opc-7025.streamlit.app"

      - name: Notify failure
        if: ${{ needs.test.result == 'failure' || needs.validate-api.result == 'failure' || needs.validate-streamlit.result == 'failure' || needs.build.result == 'failure' }}
        run: |
          echo "Pipeline CI/CD échoué!"
          echo "Tests: ${{ needs.test.result }}"
          echo "API Validation: ${{ needs.validate-api.result }}"
          echo "Streamlit Validation: ${{ needs.validate-streamlit.result }}"
          echo "Build: ${{ needs.build.result }}"
          exit 1

# CACHE INVALIDATION - 18 sept 2025 18:45 - test_feature_alignment.py REMOVED DEFINITIVELY
